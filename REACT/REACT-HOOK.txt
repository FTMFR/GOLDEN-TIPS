##Diffrences between useMemo and useCallback
#useMemo:
1. What it returns: When the component renders, the function is called and its return 'value' is stored.
2. Dependency Array: Controls when the value or function is recalculated; If the dependencies haven't changed since the last render, the memoized 'value' is returned without re-running the 'function'.
3. Use case: Expensive calculations based on props or state; This can be useful for 'expensive calculations' that don't need to be done on every render if the 'underlying data' hasn't changed.

**example: 
const isEven = useMemo(() => {
    let index = 0;
    while (index < 200000000) {
    index++;
    }
    return firstCount % 2 === 0;
}, [firstCount]);


#useCallback: 
1. What it returns: The first time the component renders, the 'function' is stored.
2. Dependency Array: Controls when the function reference is recreated; On subsequent renders, if the dependencies haven't changed, the same 'function' reference is returned.
3. Use case: Preventing child component re-renders due to prop changes; This is useful for preventing 'child components' from re-rendering unnecessarily if the 'function' they receive as a prop hasn't changed.

**example:
const addCounter = useCallback(() => {
    setCounter((prev) => prev + 1);
}, [counter]);


##Similarity betwen useMemo and useCallback
1. Both hooks rely on dependency arrays to determine when to re-run the 'function' or return the memoized 'value'.
2. Overusing these hooks can add complexity to your code, so use them judiciously for performance bottlenecks.

##Choosing Between useMemo and useCallback:
#useMemo:
Use when you want to optimize the result of an expensive function call based on its dependencies.

#useCallback:
Use when you want to prevent child components from re-rendering unnecessarily due to prop changes, especially if the prop is a function itself.

**
//
**

##useState-hook
#The Asynchronous Nature of useState and Using useEffect
The useState hook in React is asynchronous, meaning that the state updates are not immediate. When you call useState to update the state, the code continues to execute without waiting for the state update to complete. This can lead to unexpected behavior, such as seeing outdated state values in UI updates.
To handle the asynchronous nature of useState, you can use the useEffect hook. The useEffect hook allows you to perform side effects, which are actions that may have an impact outside of the component's rendering process. In this case, you can use useEffect to execute code that takes time, such as fetching data from an API, and then update the state with the result.
There are other ways to handle asynchronous operations in React, such as using libraries like react-async or redux-thunk. However, useEffect is a general-purpose hook that can be used for a variety of side effects, including asynchronous tasks.


**
//
**


##HOC
HOC stands for Higher-order component. it's pattern used in 'React' for reusing componen't logic.
it's a function that takes an existing component and wraps it with some additional functionality. you can add features like authentication, styling or data fetching to multiple component without having to write that code repeatedly.
Here's a auick breakdown of how HOCs work:
1. Define the HOC function: this function takes a component as an argument (often called the wrapped component).
2. Add functionality: inside the function, you write the code that add extra features you want. 
3. Return a new component: the HOC function return a new component that incorporates the wrapped compoentn and the added functionality.



**
//
**


Similarity between useMemo and memo in React:
Both of them are tools in React to improve performance.


Diffrences between useMemo and memo in React:
##memo
Use Case: React.memo is for entire components. we wrap component with React.memo to prevent it from re-rendering if its props haven't changed. 
expamle: like a component displaying a list - you only want it to re-render if the list items themselced change, not beacause some other part of the app re-rendered.


##useMemo
Use Case: useMemo is for values or computations within a component. we can use it to wrap an expensive calculation or function.
if the values it uses (like props or state) haven't changed, useMemo will return the prevoius result instead of re-doing calculation.
example: it's like caching a result to avoid extra work.
